

import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px


spacex_df=pd.read_csv("spacex_launch_dash.csv")

max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()

app=dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                # dcc.Dropdown(id='site-dropdown',...)
                                html.Br(),
                                html.Div(dcc.Dropdown(id='site-dropdown',
                                                      options=[
                                                          {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},
                                                          {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},
                                                          {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},
                                                          {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'},
                                                          {'label': 'All sites', 'value': 'ALL'},
                                                      ],
                                                      value='ALL')),
                                html.Div(dcc.Graph(id='success-pie-chart', children=[])),
                                html.Br(),

                                html.P("Payload new range (Kg):"),

                                html.Br(),

                                html.Div(dcc.RangeSlider(
                                    id='payload-slider',
                                    min=0,
                                    max=10000,
                                    value=[min_payload,max_payload],
                                    step=1000)),
                                # TASK 3: Add a slider to select payload range
                                # dcc.RangeSlider(id='payload-slider',...)

                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
])

@app.callback( [Output(component_id='success-pie-chart', component_property='figure'),
                Output(component_id='success-payload-scatter-chart', component_property='figure')
               ],
               [Input(component_id='site-dropdown', component_property='value'),
                Input(component_id='payload-slider', component_property='value')])
def get_graph(site,payload):
    print(site)
    print(payload)
    df=spacex_df.copy()
    low, high = payload
    if site=='ALL' :
        dff=df[df['class']==1]
        dff.groupby(['Launch Site']).sum()
        fig_pie = px.pie(dff, values='class', names='Launch Site')

        mask = (df['Payload Mass (kg)'] > low) & (df['Payload Mass (kg)'] < high)
        fig_scat=px.scatter(df[mask], x="Payload Mass (kg)", y="class", color="Booster Version Category")
    else:
        dff = df[df['Launch Site'] == site]
        dfff=dff.groupby(['class']).size().reset_index(name='counts')
        fig_pie = px.pie(dfff, values='counts', names='class')

        mask = (dff['Payload Mass (kg)'] > low) & (dff['Payload Mass (kg)'] < high)
        fig_scat=px.scatter(dff[mask], x="Payload Mass (kg)", y="class", color="Booster Version Category")

    return fig_pie,fig_scat



if __name__ == '__main__':
    app.run_server(port=8054,debug=True)
